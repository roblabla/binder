initSidebarItems({"constant":[["MSG_CMSG_CLOEXEC","Set the `close-on-exec` flag for the file descriptor received via a UNIX domain file descriptor using the `SCM_RIGHTS` operation (described in unix(7)). This flag is useful for the same reasons as the `O_CLOEXEC` flag of open(2)."],["MSG_CTRUNC","Receive flags: Control Data was discarded (buffer too small)"],["MSG_DONTWAIT","Enables nonblocking operation; if the operation would block, `EAGAIN` or `EWOULDBLOCK` is returned.  This provides similar behavior to setting the `O_NONBLOCK` flag (via the `fcntl` `F_SETFL` operation), but differs in that `MSG_DONTWAIT` is a per- call option, whereas `O_NONBLOCK` is a setting on the open file description (see open(2)), which will affect all threads in the calling process and as well as other processes that hold file descriptors referring to the same open file description."],["MSG_EOR","Terminates a record (when this notion is supported, as for sockets of type `SeqPacket`)."],["MSG_ERRQUEUE","This flag specifies that queued errors should be received from the socket error queue. (For more details, see recvfrom(2))"],["MSG_OOB","Sends or requests out-of-band data on sockets that support this notion (e.g., of type `Stream`); the underlying protocol must also support out-of-band data."],["MSG_PEEK","Peeks at an incoming message. The data is treated as unread and the next `recv()` or similar function shall still return this data."],["MSG_TRUNC","For raw (`Packet`), Internet datagram (since Linux 2.4.27/2.6.8), netlink (since Linux 2.6.22) and UNIX datagram (since Linux 3.4) sockets: return the real length of the packet or datagram, even when it was longer than the passed buffer. Not implemented for UNIX domain (unix(7)) sockets."],["SOCK_CLOEXEC",""],["SOCK_NONBLOCK",""]],"enum":[["AddressFamily","These constants specify the protocol family to be used in `socket` and `socketpair`"],["ControlMessage","A type-safe wrapper around a single control message. More types may be added to this enum; do not exhaustively pattern-match it. Further reading"],["InetAddr",""],["IpAddr",""],["Shutdown",""],["SockAddr","Represents a socket address"],["SockLevel","The protocol level at which to get / set socket options. Used as an argument to `getsockopt` and `setsockopt`."],["SockProtocol","Constants used in `socket` and `socketpair` to specify the protocol to use."],["SockType","These constants are used to specify the communication semantics when creating a socket with `socket()`"]],"fn":[["accept","Accept a connection on a socket"],["accept4","Accept a connection on a socket"],["bind","Bind a name to a socket"],["connect","Initiate a connection on a socket"],["getpeername","Get the address of the peer connected to the socket `fd`."],["getsockname","Get the current address to which the socket `fd` is bound."],["getsockopt","Get the current value for the requested socket option"],["listen","Listen for connections on a socket"],["recv","Receive data from a connection-oriented socket. Returns the number of bytes read"],["recvfrom","Receive data from a connectionless or connection-oriented socket. Returns the number of bytes read and the socket address of the sender."],["recvmsg","Receive message in scatter-gather vectors from a socket, and optionally receive ancillary data into the provided buffer. If no ancillary data is desired, use () as the type parameter."],["send","Send data to a connection-oriented socket. Returns the number of bytes read"],["sendmsg","Send data in scatter-gather vectors to a socket, possibly accompanied by ancillary data. Optionally direct the message at the given address, as with sendto."],["sendto",""],["setsockopt","Sets the value for the requested socket option"],["shutdown","Shut down part of a full-duplex connection."],["sockaddr_storage_to_addr","Return the appropriate SockAddr type from a `sockaddr_storage` of a certain size.  In C this would usually be done by casting.  The `len` argument should be the number of bytes in the sockaddr_storage that are actually allocated and valid.  It must be at least as large as all the useful parts of the structure.  Note that in the case of a `sockaddr_un`, `len` need not include the terminating null."],["socket","Create an endpoint for communication"],["socketpair","Create a pair of connected sockets"]],"mod":[["sockopt",""]],"struct":[["CmsgIterator",""],["CmsgSpace","A structure used to make room in a cmsghdr passed to recvmsg. The size and alignment match that of a cmsghdr followed by a T, but the fields are not accessible, as the actual types will change on a call to recvmsg."],["Ipv4Addr",""],["Ipv6Addr",""],["MsgFlags","Flags for send/recv and their relatives"],["NetlinkAddr",""],["RecvMsg",""],["SockFlag","Extra flags - Supported by Linux 2.6.27, normalized on other platforms"],["UnixAddr","A wrapper around `sockaddr_un`. We track the length of `sun_path` (excluding a terminating null), because it may not be null-terminated.  For example, unconnected and Linux abstract sockets are never null-terminated, and POSIX does not require that `sun_len` include the terminating null even for normal sockets.  Note that the actual sockaddr length is greater by `offset_of!(libc::sockaddr_un, sun_path)`"],["in6_addr",""],["in_addr",""],["ip_mreq",""],["ipv6_mreq",""],["linger",""],["sockaddr",""],["sockaddr_in",""],["sockaddr_in6",""],["sockaddr_storage",""],["sockaddr_un",""],["ucred",""]],"trait":[["GetSockOpt","Represents a socket option that can be accessed or set. Used as an argument to `getsockopt`"],["SetSockOpt","Represents a socket option that can be accessed or set. Used as an argument to `setsockopt`"]],"type":[["sa_family_t",""]]});