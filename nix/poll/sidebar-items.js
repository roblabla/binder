initSidebarItems({"constant":[["POLLERR","Error condition (only returned in `PollFd::revents`; ignored in `PollFd::new`). This bit is also set for a file descriptor referring to the write end of a pipe when the read end has been closed."],["POLLHUP","Hang up (only returned in `PollFd::revents`; ignored in `PollFd::new`). Note that when reading from a channel such as a pipe or a stream socket, this event merely indicates that the peer closed its end of the channel.  Subsequent reads from the channel will return 0 (end of file) only after all outstanding data in the channel has been consumed."],["POLLIN","There is data to read."],["POLLNVAL","Invalid request: `fd` not open (only returned in `PollFd::revents`; ignored in `PollFd::new`)."],["POLLOUT","Writing is now possible, though a write larger that the available space in a socket or pipe will still block (unless `O_NONBLOCK` is set)."],["POLLPRI","There is some exceptional condition on the file descriptor."],["POLLRDBAND","Priority band data can be read (generally unused on Linux)."],["POLLRDNORM","Equivalent to `POLLIN`"],["POLLWRBAND","Priority data may be written."],["POLLWRNORM","Equivalent to `POLLOUT`"]],"fn":[["poll","`poll` waits for one of a set of file descriptors to become ready to perform I/O. (`poll(2)`)"],["ppoll","`ppoll()` allows an application to safely wait until either a file descriptor becomes ready or until a signal is caught. (`poll(2)`)"]],"struct":[["EventFlags","These flags define the different events that can be monitored by `poll` and `ppoll`"],["PollFd","This is a wrapper around `libc::pollfd`."]]});